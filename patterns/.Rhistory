library(magick)
imgs <- list.files("faces/")
for(img in imgs){
}
img <- magick::image_read(file)
img <- magick::image_read(paste0("faces/", file))
file
setwd("D:/Dropbox/RealityBendingLab/Apokalypsis/patterns")
library(magick)
imgs <- list.files("faces/")
for(file in imgs){
img <- magick::image_read(paste0("faces/", file))
}
img
img <- magick::image_read(paste0("faces/", file)) %>%
image_quantize(colorspace = 'gray') %>%
image_equalize()
img
file
setwd("D:/Dropbox/RealityBendingLab/Apokalypsis/patterns")
magick::image_read(paste0("faces/faces_database/", file)) %>%
magick::image_quantize(colorspace = 'gray') %>%
magick::image_equalize() %>%
magick::image_write(paste0("faces/", gsub(".jpg", ".png", file)))
library(magick)
imgs <- list.files("faces/")
for(file in imgs){
magick::image_read(paste0("faces/faces_database/", file)) %>%
magick::image_resize("1280") %>%  # Height
magick::image_quantize(colorspace = 'gray') %>%
magick::image_equalize() %>%
magick::image_write(paste0("faces/", gsub(".jpg", ".png", file)))
}
setwd("D:/Dropbox/RealityBendingLab/Apokalypsis/patterns")
library(magick)
imgs <- list.files("faces/")
for(file in imgs){
magick::image_read(paste0("faces/faces_database/", file)) %>%
magick::image_resize("1280") %>%  # Height
magick::image_quantize(colorspace = 'gray') %>%
magick::image_equalize() %>%
magick::image_write(paste0("faces/", gsub(".jpg", ".png", file)))
}
imgs <- list.files("faces/")
imgs
imgs <- list.files("faces/faces_database/")
imgs
for(file in imgs){
magick::image_read(paste0("faces/faces_database/", file)) %>%
magick::image_resize("1280") %>%  # Height
magick::image_quantize(colorspace = 'gray') %>%
magick::image_equalize() %>%
magick::image_write(paste0("faces/", gsub(".jpg", ".png", file)))
}
setwd("D:/Dropbox/RealityBendingLab/Apokalypsis/patterns")
library(rsvg)
files <- list.files("svg/")
for(file in files){
# Load a small version
arr <- rsvg::rsvg(paste0("svg/", file))
height <- dim(arr)[1]
width <- dim(arr)[2]
# Load desired size
if(width > height){
arr <- rsvg::rsvg(paste0("svg/", file), width = 1280)
} else{
arr <- rsvg::rsvg(paste0("svg/", file), height = 1280)
}
# Add bands to make it square
diff <- abs(dim(arr)[1] - dim(arr)[2])
size_1 <- trunc(diff / 2)
size_2 <- ifelse(diff / 2 > size_1, size_1 + 1, size_1)
if(width > height){
band1 <- array(0, dim=c(size_1, 1280, 4))
band2 <- array(0, dim=c(size_2, 1280, 4))
arr <- DescTools::Abind(band1, arr, band2, along=1)
} else{
band1 <- array(0, dim=c(1280, size_1, 4))
band2 <- array(0, dim=c(1280, size_2, 4))
arr <- DescTools::Abind(band1, arr, band2, along=2)
}
# Recolor
arr[, , 1:3] <- ifelse(arr[, , 1:3] < 0.5, 0, 1)
# plot(density(as.matrix(arr[, , 1:3])))
# render it into a bitmap array
png::writePNG(arr, paste0("final/", gsub(".svg", ".png", file)))
}
library(rsvg)
files <- list.files("svg/")
for(file in files){
# Load a small version
arr <- rsvg::rsvg(paste0("svg/", file))
height <- dim(arr)[1]
width <- dim(arr)[2]
# Load desired size
if(width > height){
arr <- rsvg::rsvg(paste0("svg/", file), width = 1280)
} else{
arr <- rsvg::rsvg(paste0("svg/", file), height = 1280)
}
# Add bands to make it square
diff <- abs(dim(arr)[1] - dim(arr)[2])
size_1 <- trunc(diff / 2)
size_2 <- ifelse(diff / 2 > size_1, size_1 + 1, size_1)
if(width > height){
band1 <- array(0, dim=c(size_1, 1280, 4))
band2 <- array(0, dim=c(size_2, 1280, 4))
arr <- DescTools::Abind(band1, arr, band2, along=1)
} else{
band1 <- array(0, dim=c(1280, size_1, 4))
band2 <- array(0, dim=c(1280, size_2, 4))
arr <- DescTools::Abind(band1, arr, band2, along=2)
}
# Recolor
arr[, , 1:3] <- ifelse(arr[, , 1:3] < 0.5, 0, 1)
# plot(density(as.matrix(arr[, , 1:3])))
# render it into a bitmap array
png::writePNG(arr, paste0("png/", gsub(".svg", ".png", file)))
}
library(rsvg)
files <- list.files("svg/")
for(file in files){
# Load a small version
arr <- rsvg::rsvg(paste0("svg/", file))
height <- dim(arr)[1]
width <- dim(arr)[2]
# Load desired size
if(width > height){
arr <- rsvg::rsvg(paste0("svg/", file), width = 1280)
} else{
arr <- rsvg::rsvg(paste0("svg/", file), height = 1280)
}
# Add bands to make it square
diff <- abs(dim(arr)[1] - dim(arr)[2])
size_1 <- trunc(diff / 2)
size_2 <- ifelse(diff / 2 > size_1, size_1 + 1, size_1)
if(width > height){
band1 <- array(0, dim=c(size_1, 1280, 4))
band2 <- array(0, dim=c(size_2, 1280, 4))
arr <- DescTools::Abind(band1, arr, band2, along=1)
} else{
band1 <- array(0, dim=c(1280, size_1, 4))
band2 <- array(0, dim=c(1280, size_2, 4))
arr <- DescTools::Abind(band1, arr, band2, along=2)
}
# Recolor
arr[, , 1:3] <- ifelse(arr[, , 1:3] < 0.5, 0, 1)
# plot(density(as.matrix(arr[, , 1:3])))
# render it into a bitmap array
png::writePNG(arr, paste0("png/", gsub(".svg", ".png", file)))
}
files <- list.files("svg/")
files
files <- c("skull_1.svg",     "skull_2.svg",     "skull_3.svg" ,    "skull_4.svg"   , "skull_5.svg")
for(file in files){
# Load a small version
arr <- rsvg::rsvg(paste0("svg/", file))
height <- dim(arr)[1]
width <- dim(arr)[2]
# Load desired size
if(width > height){
arr <- rsvg::rsvg(paste0("svg/", file), width = 1280)
} else{
arr <- rsvg::rsvg(paste0("svg/", file), height = 1280)
}
# Add bands to make it square
diff <- abs(dim(arr)[1] - dim(arr)[2])
size_1 <- trunc(diff / 2)
size_2 <- ifelse(diff / 2 > size_1, size_1 + 1, size_1)
if(width > height){
band1 <- array(0, dim=c(size_1, 1280, 4))
band2 <- array(0, dim=c(size_2, 1280, 4))
arr <- DescTools::Abind(band1, arr, band2, along=1)
} else{
band1 <- array(0, dim=c(1280, size_1, 4))
band2 <- array(0, dim=c(1280, size_2, 4))
arr <- DescTools::Abind(band1, arr, band2, along=2)
}
# Recolor
arr[, , 1:3] <- ifelse(arr[, , 1:3] < 0.5, 0, 1)
# plot(density(as.matrix(arr[, , 1:3])))
# render it into a bitmap array
png::writePNG(arr, paste0("png/", gsub(".svg", ".png", file)))
}
